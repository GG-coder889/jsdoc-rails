def confirm(msg)
  puts msg
  STDIN.gets.strip == 'yes'
end

def wipe_data(force=false)
  unless force
    msg  = " /!\\ WARNING /!\\ THIS OPERATION WILL WIPE OUT EVERYTHING FROM THE JSDOC-RAILS TABLES.\n"
    msg += " /!\\ WARNING /!\\ To skip this step specify NOWIPE=true when calling this task.\n"
    msg += " /!\\ WARNING /!\\ If you're sure you want to continue, please type 'yes'."
  end

  unless force or confirm(msg)
    puts "Data wipe cancelled"
    return false 
  end
    
  [Jsdoc::BorrowedFunction, Jsdoc::BorrowedProperty, Jsdoc::Example, Jsdoc::Function, Jsdoc::Param, Jsdoc::Property, Jsdoc::Require, Jsdoc::Return, Jsdoc::See, Jsdoc::Symbol, Jsdoc::Throw].each do |klass|
  puts "Deleting everything for: #{klass.name}"
    klass.delete_all
  end

  return true
end

def output_jsdocs(src, dst)
  output_dir = File.dirname(dst)
  output_file = File.basename(dst)

  jsdoc_path = File.join(File.dirname(__FILE__), '../../../jsdoc-toolkit')

  template_path = File.join(jsdoc_path, 'templates', 'jsdoc-rails')

  puts "Reading from: #{ENV['SRC']}"
  puts "Outputing to: #{File.join(output_dir, output_file)}"
  system(%Q(cd "#{src.gsub('"', '\\"')}"; java -jar "#{jsdoc_path}/jsrun.jar" "#{jsdoc_path}/app/run.js" -r=100 -a -d="#{output_dir}" -D="outputFile:#{output_file}" -t=#{template_path} -- *))
end

namespace :jsdoc do
  desc "Write a Ruby script containing all the JSDoc definitions which can be loaded directly into Rails. Specify with SRC=/path/to/javascript/, OUTPUT=db/jsdoc-data.rb"
  task :output do
    output = ENV['OUTPUT'] || 'db/jsdoc-data.rb'
    output = File.join(Dir.pwd, output) unless output[0..0] == '/'
    src = ENV['SRC']

    if src.blank?
      puts "You must specify the SRC variable pointing to the location of your javascript code"
      return 1
    end

    output_jsdocs(src, output)
  end
end

namespace :jsdoc do
  desc "Load a Ruby script containing JSDoc data, as generated by 'rake jsdoc:output'. Specify with SRC=db/jsdoc-data.rb, NOWIPE=false"
  task :load => :environment do
    src = ENV['SRC'] || 'db/jsdoc-data.rb'
    force = ENV['FORCEWIPE'].present? and ENV['FORCEWIPE'][0..0].downcase == 't'

    unless ENV['NOWIPE'].present? and ENV['NOWIPE'][0..0].downcase == 't'
      unless wipe_data(force)
        puts "Data load cancelled"
        exit
      end
    end
    load(src)
  end
end

namespace :jsdoc do
  desc "Load all the JSDoc data from your Javascript source. Effectivly the same as running jsdoc:output then jsdoc:load. Specify with SRC=/path/to/javascript/, NOWIPE=false"
  task :import => :environment do
    src = ENV['SRC']
    force = ENV['FORCEWIPE'].present? and ENV['FORCEWIPE'][0..0].downcase == 't'

    if src.blank?
      puts "You must specify the SRC variable pointing to the location of your javascript code"
      return 1
    end

    unless ENV['NOWIPE'].present? and ENV['NOWIPE'][0..0].downcase == 'f'
      unless wipe_data(force)
        puts "Data load cancelled"
        exit
      end
    end

    tmpfile = Tempfile.new('jsdoc-rails')
    output_jsdocs(src, tmpfile.path)
    load(tmpfile.path)
    tmpfile.close
  end
end
